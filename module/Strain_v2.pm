package Strain;

use v5.38;
use Exporter qw(import);
our @EXPORT_OK = qw(keep discard);

sub keep ($input, $function) {
    return [grep { $function->($_) } @$input];
}

sub discard ($input, $function) {
    return [grep { !$function->($_) } @$input];
}

1; # Ensure the module returns a true value


=pod

Use of grep: Instead of manually iterating through each element of the input array and pushing it to a result array based on a condition, you can use Perl's built-in grep function. grep filters a list based on a condition, which makes it ideal for both keep and discard operations. This not only reduces the amount of code but also improves its readability and performance.

Direct Invocation of $function: By using the arrow syntax ($function->($_)), you directly invoke the passed subroutine reference on each element. This is a more common Perl idiom for calling code references.

Removal of Unnecessary Variables: The refactored code eliminates the need for intermediate variables like $sub_res and $output by directly using the result of the function call in the grep condition.

Returning Array References: Both subroutines now return references to the lists generated by grep, which is consistent with the original behavior but done in a more concise manner.

=cut